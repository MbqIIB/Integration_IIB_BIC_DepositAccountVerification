BROKER SCHEMA com.tcfbank.www

CREATE COMPUTE MODULE SecurityError_BuildResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
  --  Determine return MessageType		
		DECLARE ServiceNameWithSchema CHARACTER MessageFlowLabel;
  --  remove "com.tcfbank.www." from ServiceNameWithSchema
	 	DECLARE myLength INT;
	 	SET myLength = LENGTH(ServiceNameWithSchema) - 16;
	 	DECLARE ServiceName CHARACTER;
	 	SET ServiceName = RIGHT(ServiceNameWithSchema, myLength);
  --  add "Response" to ServiceName to determine MessageType
        DECLARE MessageName CHARACTER;	 	
	 	SET MessageName = ServiceName || 'Response'; 
	 	
--    set output message information
		SET OutputRoot.Properties.MessageSet = 'Web_Services_Message_Set';
		SET OutputRoot.Properties.MessageType = MessageName;
		SET OutputRoot.Properties.MessageFormat = 'XML1';
		
--    build output message - status and enterprise header				
		SET OutputRoot.XMLNSC.tns:{MessageName}.tns:Status.tns:StatusDisposition = '2';
        SET OutputRoot.XMLNSC.tns:{MessageName}.tns:Status.tns:StatusCode = '9999';
        SET OutputRoot.XMLNSC.tns:{MessageName}.tns:Status.tns:StatusDetail.tns:StatusCode = '9999';
        SET OutputRoot.XMLNSC.tns:{MessageName}.tns:Status.tns:StatusDetail.tns:StatusSubCode = '0001';
        SET OutputRoot.XMLNSC.tns:{MessageName}.tns:Status.tns:StatusDetail.tns:StatusDescription = 'SecurityError';
        SET OutputRoot.XMLNSC.tns:{MessageName}.tns:Status.tns:StatusDetail.tns:StatusSource = 'Broker';
        SET OutputRoot.XMLNSC.tns:{MessageName}.tns:Status.tns:Repeatable = TRUE; 	 	
        IF InputLocalEnvironment.Variables.EnterpriseHeader IS NOT NULL THEN
			SET OutputRoot.XMLNSC.tns:{MessageName}.tns:EnterpriseHeader.tns:Identity.tns:Username = InputLocalEnvironment.Variables.EnterpriseHeader.Username; 
			SET OutputRoot.XMLNSC.tns:{MessageName}.tns:EnterpriseHeader.tns:Identity.tns:Password = InputLocalEnvironment.Variables.EnterpriseHeader.Password; 
			SET OutputRoot.XMLNSC.tns:{MessageName}.tns:EnterpriseHeader.tns:Identity.tns:IdentitySource = InputLocalEnvironment.Variables.EnterpriseHeader.IdentitySource;
			SET OutputRoot.XMLNSC.tns:{MessageName}.tns:EnterpriseHeader.tns:Version.tns:MessageVersion = InputLocalEnvironment.Variables.EnterpriseHeader.MessageVersion;
			SET OutputRoot.XMLNSC.tns:{MessageName}.tns:EnterpriseHeader.tns:Version.tns:MessageRevision = InputLocalEnvironment.Variables.EnterpriseHeader.MessageRevision;
			SET OutputRoot.XMLNSC.tns:{MessageName}.tns:EnterpriseHeader.tns:Channel = InputLocalEnvironment.Variables.EnterpriseHeader.Channel;
			SET OutputRoot.XMLNSC.tns:{MessageName}.tns:EnterpriseHeader.tns:MessageDateTime = InputLocalEnvironment.Variables.EnterpriseHeader.MessageDateTime;
		ELSE
		    SET OutputRoot.XMLNSC.tns:{MessageName}.tns:EnterpriseHeader.tns:Identity.tns:Username = 'user';
		    SET OutputRoot.XMLNSC.tns:{MessageName}.tns:EnterpriseHeader.tns:Identity.tns:Password = 'password';
		    SET OutputRoot.XMLNSC.tns:{MessageName}.tns:EnterpriseHeader.tns:Identity.tns:IdentitySource = 'broker';
		    SET OutputRoot.XMLNSC.tns:{MessageName}.tns:EnterpriseHeader.tns:Version.tns:MessageVersion = '01';
		    SET OutputRoot.XMLNSC.tns:{MessageName}.tns:EnterpriseHeader.tns:Version.tns:MessageRevision = '001';
		    SET OutputRoot.XMLNSC.tns:{MessageName}.tns:EnterpriseHeader.tns:Channel = 'UNK';
		    SET OutputRoot.XMLNSC.tns:{MessageName}.tns:EnterpriseHeader.tns:MessageDateTime = CURRENT_TIMESTAMP;
		END IF;
		-- CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

CREATE FILTER MODULE InquirySecurityTeller_CheckTable
	
	DECLARE TestingTool   EXTERNAL CHARACTER;
	DECLARE TLR_user      EXTERNAL CHARACTER;
	
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
 		CALL BuildTable();
		
  --   check security table
        DECLARE validsecurityflag CHAR 'N';
        DECLARE I INT 1;
        WHILE ((Securitytable.Username[I] IS NOT NULL) AND (validsecurityflag = 'N') AND (I < 100))DO
	       	IF Root.XMLNSC.tns:*.tns:EnterpriseHeader.tns:Identity.tns:Username = Securitytable.Username[I] AND
    	   	   Root.XMLNSC.tns:*.tns:EnterpriseHeader.tns:Identity.tns:Password = Securitytable.Password[I] THEN
       		   SET validsecurityflag = 'Y';
       		END IF;
       		SET I = I + 1;
        END WHILE;
        IF validsecurityflag = 'Y' THEN
            RETURN TRUE;
        ELSE
        	RETURN FALSE;
        END IF;
	END;

	CREATE PROCEDURE BuildTable() BEGIN
		DECLARE INDX INT 1;
		
		SET Securitytable.Username[INDX] = 'TestingTool';
		SET Securitytable.Password[INDX] = TestingTool;
		SET INDX = INDX + 1;

		SET Securitytable.Username[INDX] = 'TLR_user';
		SET Securitytable.Password[INDX] = TLR_user;
		SET INDX = INDX + 1;
		
	END; 
END MODULE;


CREATE FILTER MODULE InquirySecurityBIC_CheckTable
	
DECLARE TestingTool   EXTERNAL CHARACTER;
DECLARE BIC_user      EXTERNAL CHARACTER;
	
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
 		CALL BuildTable();
 		
  --   check security table
        DECLARE validsecurityflag CHAR 'N';
        DECLARE I INT 1;
        WHILE ((BICSecuritytable.Username[I] IS NOT NULL) AND (validsecurityflag = 'N') AND (I < 100))DO
	       	IF Root.XMLNSC.tns:*.tns:EnterpriseHeader.tns:Identity.tns:Username = BICSecuritytable.Username[I] AND
    	   	   Root.XMLNSC.tns:*.tns:EnterpriseHeader.tns:Identity.tns:Password = BICSecuritytable.Password[I] THEN
       		   SET validsecurityflag = 'Y';
       		END IF;
       		SET I = I + 1;
        END WHILE;
        IF validsecurityflag = 'Y' THEN
            RETURN TRUE;
        ELSE
        	RETURN FALSE;
        END IF;
	END;

	CREATE PROCEDURE BuildTable() BEGIN
		DECLARE INDX INT 1;
		
		SET BICSecuritytable.Username[INDX] = 'TestingTool';
		SET BICSecuritytable.Password[INDX] = TestingTool;
		SET INDX = INDX + 1;

		SET BICSecuritytable.Username[INDX] = 'BIC_user';
		SET BICSecuritytable.Password[INDX] = BIC_user;
		SET INDX = INDX + 1;
		
	END; 
END MODULE;

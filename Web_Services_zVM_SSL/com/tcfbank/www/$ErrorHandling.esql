BROKER SCHEMA com.tcfbank.www

CREATE COMPUTE MODULE ErrorHandling_SetInputExceptionList
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
--		SET OutputRoot = InputRoot;
		SET OutputRoot.Properties.MessageFormat = 'XMLNSC';
		SET OutputRoot.Properties.MessageSet = '';
		SET OutputRoot.Properties.MessageType = '';
		SET OutputRoot.XMLNSC.ExceptionList = InputExceptionList;
		SET OutputRoot.XMLNSC.ExceptionList.InputMessage = InputBody;
		IF OutputRoot.XMLNSC.ExceptionList.InputMessage.*.tns:SecretCode IS NOT NULL THEN
			SET OutputRoot.XMLNSC.ExceptionList.InputMessage.*.tns:SecretCode = '********';
		END IF;
		RETURN TRUE;
	END;
END MODULE;

CREATE COMPUTE MODULE ErrorHandling_ParseInputExceptionList 
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		IF InputRoot.SOAP.Body IS NOT NULL THEN
			SET OutputRoot = InputRoot;
 		    CALL CopyMessageHeaders();
		ELSE
	  	 DECLARE myPointer REFERENCE TO InputExceptionList.*[1];
		 DECLARE failureDesc CHARACTER;
		 DECLARE endFlag CHARACTER 'N';
		 DECLARE endFlag1 CHARACTER 'N';
	 	 DECLARE INDX INT;
	 	 DECLARE INDX1 INT;
	 	 DECLARE STOPINDX INT;
	 	 DECLARE STOPINDX1 INT;
	 	 DECLARE Sean CHARACTER MessageFlowLabel;
	 	 DECLARE MessageName CHARACTER; 
	 	 DECLARE myLength INT;
	 	 SET myLength = LENGTH(Sean) - 16;
	 	 SET MessageName = RIGHT(Sean, myLength) ;
	 	 SET MessageName = MessageName || 'Response';
		 CALL CopyMessageHeaders();
		 SET OutputRoot.Properties.Encoding = 785;
		 Set OutputRoot.Properties.CodedCharSetId = 1208;
		 SET OutputRoot.Properties.MessageSet = 'Web_Services_Message_Setv1.1';
	     SET OutputRoot.Properties.MessageType = 'ServiceFailure';
		 SET OutputRoot.Properties.MessageFormat = 'XML1';		
		 SET OutputRoot.XMLNSC.tns:{MessageName}.tns:Status.tns:StatusDisposition = '2';
         SET OutputRoot.XMLNSC.tns:{MessageName}.tns:Status.tns:StatusCode = '9999';
         SET failureDesc = ' ';
--         
         SET STOPINDX = 1;
         SET endFlag = 'N';
         WHILE endFlag = 'N' DO
            MOVE myPointer LASTCHILD;
            IF LASTMOVE(myPointer)THEN
            	IF myPointer.Number IS NULL THEN
            		MOVE myPointer PARENT;
            		SET endFlag = 'Y';
            	END IF;
            ELSE
            	SET endFlag = 'Y';
            END IF;
            IF STOPINDX > 100 THEN
            	SET endFlag = 'Y';
            END IF;
            SET STOPINDX = STOPINDX + 1; 	
		 END WHILE;
		 SET INDX1 = 1;
		 SET STOPINDX1 = 1;
		 SET endFlag1 = 'N';
		 WHILE endFlag1 = 'N' DO
		 	IF myPointer.Number IS NOT NULL THEN
		    	SET failureDesc = failureDesc || myPointer.Text; 
		 	    SET INDX = 1;
		 	    SET STOPINDX = 1;
		 	    SET endFlag = 'N';
		 	    WHILE endFlag = 'N' DO
			       IF myPointer.Insert[INDX].Type IS NOT NULL THEN
	                  IF myPointer.Insert[INDX].Type = 5 THEN
	                     SET failureDesc = failureDesc || myPointer.Insert[INDX].Text;
	                  END IF;
			       ELSE
			  	      SET endFlag = 'Y'; 
			       END IF;
	     	       SET INDX = INDX + 1;
	     	       IF STOPINDX > 100 THEN
	     	   	      SET endFlag = 'Y';
	     	       END IF;
	     	       SET STOPINDX = STOPINDX + 1;	
	            END WHILE;
                SET OutputRoot.XMLNSC.tns:{MessageName}.tns:Status.tns:StatusDetail[INDX1].tns:StatusCode = '9999';
                SET OutputRoot.XMLNSC.tns:{MessageName}.tns:Status.tns:StatusDetail[INDX1].tns:StatusSubCode = '9998';
      	        SET OutputRoot.XMLNSC.tns:{MessageName}.tns:Status.tns:StatusDetail[INDX1].tns:StatusDescription = failureDesc;
      	        SET OutputRoot.XMLNSC.tns:{MessageName}.tns:Status.tns:StatusDetail[INDX1].tns:StatusSource = 'Broker';
      	        SET failureDesc = ' ';
      	        SET INDX1 = INDX1 + 1;
      	        MOVE myPointer PREVIOUSSIBLING;
      	        IF NOT LASTMOVE(myPointer) THEN
      	    	   SET endFlag1 = 'Y'; 
      	        END IF;
      	        IF STOPINDX1 > 100 THEN
      	    	   SET endFlag1 = 'Y';
      	        END IF;
      	        SET STOPINDX1 = STOPINDX1 + 1;
		 	ELSE
		 		SET endFlag1 = 'Y';
		 	END IF;	
		 END WHILE;
         SET OutputRoot.XMLNSC.tns:{MessageName}.tns:Status.tns:Repeatable = TRUE; 	 
 	 	 IF InputLocalEnvironment.Variables.EnterpriseHeader IS NOT NULL THEN
		 	 SET OutputRoot.XMLNSC.tns:{MessageName}.tns:EnterpriseHeader.tns:Identity.tns:Username = InputLocalEnvironment.Variables.EnterpriseHeader.Username; 
			 SET OutputRoot.XMLNSC.tns:{MessageName}.tns:EnterpriseHeader.tns:Identity.tns:Password = InputLocalEnvironment.Variables.EnterpriseHeader.Password; 
			 SET OutputRoot.XMLNSC.tns:{MessageName}.tns:EnterpriseHeader.tns:Identity.tns:IdentitySource = InputLocalEnvironment.Variables.EnterpriseHeader.IdentitySource;
			 SET OutputRoot.XMLNSC.tns:{MessageName}.tns:EnterpriseHeader.tns:Version.tns:MessageVersion = InputLocalEnvironment.Variables.EnterpriseHeader.MessageVersion;
			 SET OutputRoot.XMLNSC.tns:{MessageName}.tns:EnterpriseHeader.tns:Version.tns:MessageRevision = InputLocalEnvironment.Variables.EnterpriseHeader.MessageRevision;
			 SET OutputRoot.XMLNSC.tns:{MessageName}.tns:EnterpriseHeader.tns:Channel = InputLocalEnvironment.Variables.EnterpriseHeader.Channel;
			 SET OutputRoot.XMLNSC.tns:{MessageName}.tns:EnterpriseHeader.tns:MessageDateTime = InputLocalEnvironment.Variables.EnterpriseHeader.MessageDateTime;
 	 	 ELSE 
		     SET OutputRoot.XMLNSC.tns:{MessageName}.tns:EnterpriseHeader.tns:Identity.tns:Username = 'user';
		     SET OutputRoot.XMLNSC.tns:{MessageName}.tns:EnterpriseHeader.tns:Identity.tns:Password = 'password';
		     SET OutputRoot.XMLNSC.tns:{MessageName}.tns:EnterpriseHeader.tns:Identity.tns:IdentitySource = 'broker';
		     SET OutputRoot.XMLNSC.tns:{MessageName}.tns:EnterpriseHeader.tns:Version.tns:MessageVersion = '01';
		     SET OutputRoot.XMLNSC.tns:{MessageName}.tns:EnterpriseHeader.tns:Version.tns:MessageRevision = '001';
		     SET OutputRoot.XMLNSC.tns:{MessageName}.tns:EnterpriseHeader.tns:Channel = 'UNK';
		     SET OutputRoot.XMLNSC.tns:{MessageName}.tns:EnterpriseHeader.tns:MessageDateTime = CURRENT_TIMESTAMP;
 	 	 END IF; 
	 	END IF;   
         RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
END MODULE;
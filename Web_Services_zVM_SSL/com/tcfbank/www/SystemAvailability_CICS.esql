BROKER SCHEMA com.tcfbank.www
	
CREATE COMPUTE MODULE SystemAvailability_CICS_Build_DEP7200
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		SET OutputRoot.Properties.MessageSet = 'CICS_Commarea_Message_Setv1.1';
		SET OutputRoot.Properties.MessageType = 'DEP7200COMMAREA';
		SET OutputRoot.Properties.MessageFormat = 'Binary1';
		
		SET OutputRoot.Properties.CodedCharSetId 	= 500;
		SET OutputRoot.Properties.Encoding  		= 785;
		SET OutputRoot.Properties.ExpirationTime	= 100;
		CREATE NEXTSIBLING OF OutputRoot.Properties DOMAIN 'MQMD';		
		
		SET OutputRoot.MRM.dep7200_input_header.Version.Version = '01';
		SET OutputRoot.MRM.dep7200_input_header.Revision.Revision = '001';
		SET OutputRoot.MRM.dep7200_input_header.Channel.Channel = 'IVR';
		SET OutputRoot.MRM.dep7200_input_header.CallingProgram.CallingProgram = 'BROKER';
		SET OutputRoot.MRM.dep7200_input_header.CallingService.CallingService = 'AVAILPING';
		SET OutputRoot.MRM.dep7200_output_return.StatusDisposition.StatusDisposition = '';
		SET OutputRoot.MRM.dep7200_output_return.StatusCode.StatusCode = '';		
		SET OutputRoot.MRM.dep7200_output_return.StatusSubCode = '';		
		SET OutputRoot.MRM.dep7200_output_return.StatusDesc = '';		
		SET OutputRoot.MRM.dep7200_output_return.StatusSource = '';		
		SET OutputRoot.MRM.dep7200_output_area.dep7200_account_props = '';
		SET OutputRoot.MRM.dep7200_output_area.dep7200_posted_trans = '';
		SET OutputRoot.MRM.dep7200_output_area.dep7200_check_inq = '';		
		SET OutputRoot.MRM.dep7200_output_area.dep7200_update_props = '';		
		SET OutputRoot.MRM.dep7200_output_area.dep7200_related_accts = '';		
		SET OutputRoot.MRM.dep7200_output_area.dep7200_pending_trans = '';		
		SET OutputRoot.MRM.dep7200_output_area.dep7200_1099int = '';		
		SET OutputRoot.MRM.dep7200_output_area.dep7200_1099int_order = '';		
		SET OutputRoot.MRM.dep7200_output_area.dep7200_stmt_fee = '';		
		SET OutputRoot.MRM.dep7200_output_area.dep7200_stmt_order = '';		
		SET OutputRoot.MRM.dep7200_output_area.dep7200_merch_check = '';		
		SET OutputRoot.MRM.dep7200_output_area.dep7200_fill0 = '';		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

CREATE COMPUTE MODULE SystemAvailability_CICS_Build_CIS7220
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		SET OutputRoot.Properties.MessageSet = 'CICS_Commarea_Message_Setv1.1';
		SET OutputRoot.Properties.MessageType = 'CIS7220COMMAREA';
		SET OutputRoot.Properties.MessageFormat = 'Binary1';
		
		SET OutputRoot.Properties.CodedCharSetId 	= 500;
		SET OutputRoot.Properties.Encoding  		= 785;
		SET OutputRoot.Properties.ExpirationTime	= 100;
		CREATE NEXTSIBLING OF OutputRoot.Properties DOMAIN 'MQMD';			
		
		SET OutputRoot.MRM.cis7220_input_header.Version.Version = '01';
		SET OutputRoot.MRM.cis7220_input_header.Revision.Revision = '001';
		SET OutputRoot.MRM.cis7220_input_header.Channel.Channel = 'IVR';
		SET OutputRoot.MRM.cis7220_input_header.CallingProgram.CallingProgram = 'BROKER';
		SET OutputRoot.MRM.cis7220_input_header.CallingService.CallingService = 'AVAILPING';
		SET OutputRoot.MRM.cis7220_output_return.StatusDisposition.StatusDisposition = '';
		SET OutputRoot.MRM.cis7220_output_return.StatusCode.StatusCode = '';		
		SET OutputRoot.MRM.cis7220_output_return.StatusSubCode = '';		
		SET OutputRoot.MRM.cis7220_output_return.StatusDesc = '';		
		SET OutputRoot.MRM.cis7220_output_return.StatusSource = '';		
		SET OutputRoot.MRM.cis7220_output_area.cis7220_pin_verification = '';
		SET OutputRoot.MRM.cis7220_output_area.cis7220_secret_code_change = '';
		SET OutputRoot.MRM.cis7220_output_area.cis7220_card_activation = '';		
		SET OutputRoot.MRM.cis7220_output_area.cis7220_card_information = '';		
		SET OutputRoot.MRM.cis7220_output_area.cis7220_fill0 = ''; 	
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

CREATE COMPUTE MODULE SystemAvailability_CICS_Build_TEL7275
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		SET OutputRoot.Properties.MessageSet = 'CICS_Commarea_Message_Setv1.1';
		SET OutputRoot.Properties.MessageType = 'TEL7275COMMAREA';
		SET OutputRoot.Properties.MessageFormat = 'Binary1';
		
		SET OutputRoot.Properties.CodedCharSetId 	= 500;
		SET OutputRoot.Properties.Encoding  		= 785;
		SET OutputRoot.Properties.ExpirationTime	= 100;
		CREATE NEXTSIBLING OF OutputRoot.Properties DOMAIN 'MQMD';		
		
		SET OutputRoot.MRM.tel7275_input_header.Version.Version = '01';
		SET OutputRoot.MRM.tel7275_input_header.Revision.Revision = '001';
		SET OutputRoot.MRM.tel7275_input_header.Channel.Channel = 'IVR';
		SET OutputRoot.MRM.tel7275_input_header.CallingProgram.CallingProgram = 'BROKER';
		SET OutputRoot.MRM.tel7275_input_header.CallingService.CallingService = 'AVAILPING';
		SET OutputRoot.MRM.tel7275_output_return.StatusDisposition.StatusDisposition = '';
		SET OutputRoot.MRM.tel7275_output_return.StatusCode.StatusCode = '';		
		SET OutputRoot.MRM.tel7275_output_return.StatusSubCode = '';		
		SET OutputRoot.MRM.tel7275_output_return.StatusDesc = '';		
		SET OutputRoot.MRM.tel7275_output_return.StatusSource = '';		
		SET OutputRoot.MRM.tel7275_output_area.tel7275_balance_status = '';
		SET OutputRoot.MRM.tel7275_output_area.tel7275_transfer_status = '';
		SET OutputRoot.MRM.tel7275_output_area.tel7275_pending_status = '';
		SET OutputRoot.MRM.tel7275_output_area.tel7275_fill0 = ''; 	
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

CREATE COMPUTE MODULE SystemAvailability_CICS_Build_OBC7202
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		SET OutputRoot.Properties.MessageSet = 'CICS_Commarea_Message_Setv1.1';
		SET OutputRoot.Properties.MessageType = 'OBC7202COMMAREA';
		SET OutputRoot.Properties.MessageFormat = 'Binary1';
		
		SET OutputRoot.Properties.CodedCharSetId 	= 500;
		SET OutputRoot.Properties.Encoding  		= 785;
		SET OutputRoot.Properties.ExpirationTime	= 100;
		CREATE NEXTSIBLING OF OutputRoot.Properties DOMAIN 'MQMD';		
		
		SET OutputRoot.MRM.obc7202_input_header.Version.Version = '01';
		SET OutputRoot.MRM.obc7202_input_header.Revision.Revision = '001';
		SET OutputRoot.MRM.obc7202_input_header.Channel.Channel = 'IVR';
		SET OutputRoot.MRM.obc7202_input_header.CallingProgram.CallingProgram = 'BROKER';
		SET OutputRoot.MRM.obc7202_input_header.CallingService.CallingService = 'AVAILPING';
		SET OutputRoot.MRM.obc7202_output_return.StatusDisposition.StatusDisposition = '';
		SET OutputRoot.MRM.obc7202_output_return.StatusCode.StatusCode = '';		
		SET OutputRoot.MRM.obc7202_output_return.StatusSubCode = '';		
		SET OutputRoot.MRM.obc7202_output_return.StatusDesc = '';		
		SET OutputRoot.MRM.obc7202_output_return.StatusSource = '';		
		SET OutputRoot.MRM.obc7202_output_area.obc7202_obc_status = '';
		SET OutputRoot.MRM.obc7202_output_area.obc7202_fill0 = ''; 	
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

CREATE COMPUTE MODULE SystemAvailability_CICS_Set_DEP
DECLARE xAccountProperties		SHARED CHARACTER 'Y';
DECLARE xInformation1099		SHARED CHARACTER 'Y';
DECLARE xMerchantVerification	SHARED CHARACTER 'Y';	
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE Properties_Status CHAR;
		DECLARE Info1099_Status CHAR;
		DECLARE Merchant_Status CHAR;
		IF InputRoot.MRM.dep7200_output_area.dep7200_account_props IS NOT NULL THEN
			SET Properties_Status = InputRoot.MRM.dep7200_output_area.dep7200_account_props;
		ELSE
			SET Properties_Status = 'N';
		END IF;
		IF InputRoot.MRM.dep7200_output_area.dep7200_1099int IS NOT NULL THEN
			SET Info1099_Status = InputRoot.MRM.dep7200_output_area.dep7200_1099int;
		ELSE
			SET Info1099_Status = 'N';
		END IF;
		IF InputRoot.MRM.dep7200_output_area.dep7200_merch_check IS NOT NULL THEN
			SET Merchant_Status = InputRoot.MRM.dep7200_output_area.dep7200_merch_check;
		ELSE
			SET Merchant_Status = 'N';
		END IF;
		IF xAccountProperties = Properties_Status AND
		   xInformation1099 = Info1099_Status AND
    	   xMerchantVerification = Merchant_Status THEN
    	   RETURN FALSE;
		ELSE
	 	   IF NOT xAccountProperties = Properties_Status THEN
		      CALL SetMessageSet();
		      SET OutputRoot.MRM.ServiceName = 'AccountProperties'; 
		      SET OutputRoot.MRM.BeforeFlag = xAccountProperties;
		      SET OutputRoot.MRM.AfterFlag = Properties_Status;
		      SET xAccountProperties = Properties_Status;
     	      PROPAGATE;
		   END IF;
		   IF NOT xInformation1099 = Info1099_Status THEN
		      CALL SetMessageSet();
		      SET OutputRoot.MRM.ServiceName = 'Information1099'; 
		      SET OutputRoot.MRM.BeforeFlag = xInformation1099;
		      SET OutputRoot.MRM.AfterFlag = Info1099_Status;
		      SET xInformation1099 = Info1099_Status;
     	      PROPAGATE;
		   END IF;
    	   IF NOT xMerchantVerification = Merchant_Status THEN
			  CALL SetMessageSet();
		      SET OutputRoot.MRM.ServiceName = 'MerchantVerification'; 
		      SET OutputRoot.MRM.BeforeFlag = xMerchantVerification;
		      SET OutputRoot.MRM.AfterFlag = Merchant_Status;
		      SET xMerchantVerification = Merchant_Status;
     	      PROPAGATE;
		   END IF;
		   RETURN FALSE;
		END IF;
	END;
	CREATE PROCEDURE SetMessageSet() BEGIN
	   SET OutputRoot.Properties.MessageSet = 'CICS_Commarea_Message_Setv1.1';
	   SET OutputRoot.Properties.MessageType = 'ServiceQueue';
	   SET OutputRoot.Properties.MessageFormat = 'Binary1';
	END;
END MODULE;


CREATE COMPUTE MODULE SystemAvailability_CICS_Set_CIS
DECLARE xSecretCodeAuthentication    SHARED CHARACTER 'Y';
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE PIN_Status CHAR;
		IF InputRoot.MRM.cis7220_output_area.cis7220_pin_verification IS NOT NULL THEN
			SET PIN_Status = InputRoot.MRM.cis7220_output_area.cis7220_pin_verification;
		ELSE
			SET PIN_Status = 'N';
		END IF;
		IF xSecretCodeAuthentication = PIN_Status THEN
		    RETURN FALSE;
		ELSE
		  SET Environment.Variables.SecretCodeAuthentication = 'Y';
	      CALL SetMessageSet();
	      SET OutputRoot.MRM.ServiceName = 'SecretCodeAuthentication';
	      SET OutputRoot.MRM.BeforeFlag = xSecretCodeAuthentication;
	      SET OutputRoot.MRM.AfterFlag = PIN_Status;
	      SET xSecretCodeAuthentication = PIN_Status;
		  RETURN TRUE;
		END IF;
	END;
	CREATE PROCEDURE SetMessageSet() BEGIN
	   SET OutputRoot.Properties.MessageSet = 'CICS_Commarea_Message_Setv1.1';
	   SET OutputRoot.Properties.MessageType = 'ServiceQueue';
	   SET OutputRoot.Properties.MessageFormat = 'Binary1';
	END;
END MODULE;

CREATE COMPUTE MODULE SystemAvailability_CICS_Set_TEL
DECLARE xFundsTransfer               SHARED CHARACTER 'A'; 
DECLARE xBalanceInquiry              SHARED CHARACTER 'Y';	
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		DECLARE Balance_Status CHAR;
		DECLARE Transfer_Status CHAR;
		IF InputRoot.MRM.tel7275_output_area.tel7275_balance_status IS NOT NULL THEN
			SET Balance_Status = InputRoot.MRM.tel7275_output_area.tel7275_balance_status;
		ELSE
			SET Balance_Status = 'N';
		END IF;
		IF InputRoot.MRM.tel7275_output_area.tel7275_transfer_status IS NOT NULL THEN
			SET Transfer_Status = InputRoot.MRM.tel7275_output_area.tel7275_transfer_status;
		ELSE
			SET Transfer_Status = 'N';
		END IF;
		IF xBalanceInquiry = Balance_Status AND
		   xFundsTransfer = Transfer_Status THEN
		   RETURN FALSE;
		ELSE
           IF NOT xBalanceInquiry = Balance_Status THEN
		      SET OutputRoot.Properties.MessageSet = 'CICS_Commarea_Message_Setv1.1';
		      SET OutputRoot.Properties.MessageType = 'ServiceQueue';
		      SET OutputRoot.Properties.MessageFormat = 'Binary1';
		      SET OutputRoot.MRM.ServiceName = 'BalanceInquiry'; 
		      SET OutputRoot.MRM.BeforeFlag = xBalanceInquiry;
		      SET OutputRoot.MRM.AfterFlag = Balance_Status;
	   	      SET xBalanceInquiry = Balance_Status;
		      PROPAGATE;
           END IF;   	        				 		
  		   IF NOT xFundsTransfer = Transfer_Status THEN
		      SET OutputRoot.Properties.MessageSet = 'CICS_Commarea_Message_Setv1.1';
		      SET OutputRoot.Properties.MessageType = 'ServiceQueue';
		      SET OutputRoot.Properties.MessageFormat = 'Binary1';
		      SET OutputRoot.MRM.ServiceName = 'FundsTransfer'; 
		      SET OutputRoot.MRM.BeforeFlag = xFundsTransfer;
		      SET OutputRoot.MRM.AfterFlag = Transfer_Status;  			
		      SET xFundsTransfer = Transfer_Status;
		      PROPAGATE;
  		   END IF;
		   RETURN FALSE;
		END IF;
	END;
END MODULE;

CREATE COMPUTE MODULE SystemAvailability_CICS_Set_OBC
DECLARE xOfficialBankCheck           SHARED CHARACTER 'Y';	
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE OBC_status CHAR;
		IF InputRoot.MRM.obc7202_output_area.obc7202_obc_status IS NOT NULL THEN
			SET OBC_status = InputRoot.MRM.obc7202_output_area.obc7202_obc_status;
		ELSE
			SET OBC_status = 'N';
		END IF;
		IF xOfficialBankCheck = OBC_status THEN
		   RETURN FALSE;
		ELSE
		   SET OutputRoot.Properties.MessageSet = 'CICS_Commarea_Message_Setv1.1';
		   SET OutputRoot.Properties.MessageType = 'ServiceQueue';
		   SET OutputRoot.Properties.MessageFormat = 'Binary1';
		   SET OutputRoot.MRM.ServiceName = 'OfficialBankCheck'; 
		   SET OutputRoot.MRM.BeforeFlag = xOfficialBankCheck;
		   SET OutputRoot.MRM.AfterFlag = OBC_status;			   
		   SET xOfficialBankCheck = OBC_status;
		   RETURN TRUE;
		END IF;
	END;
END MODULE;